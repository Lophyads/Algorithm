namespace CDQ{ // 基于时间的分治算法 P3157 [CQOI2011]动态逆序对
	struct node{
		int val, pos, time, op;
		// 权值,位置,时间,操作
		bool operator < (const node& rhs) const{
			return pos < rhs.pos;
		}
	};
	const int N = 1e5 + 5e4 + 100;
	struct node arr[N];
	int BIT[N];
	ll ans[N];
	int n, m;
	void add(int x, int v){
		while(x <= n) BIT[x] += v, x += (x & (-x));
	}
	int query(int x){
		int res = 0;
		while(x){
			res += BIT[x];
			x &= (x - 1);
		}
		return res;
	}
	void dfs(int l, int r){
		if(l == r) return;
		int mid = (l + r) >> 1;
		dfs(l, mid);
		dfs(mid + 1, r);
		sort(arr + l, arr + mid + 1);
		sort(arr + mid + 1, arr + r + 1);
		int j = l;
		for(int i = mid + 1; i <= r; ++ i){// timej < timei, posj < posi, valj > vali
			while(j <= mid && arr[j].pos < arr[i].pos) add(n - arr[j].val + 1, arr[j].op), ++ j;
			ans[arr[i].time] += arr[i].op * query(n - arr[i].val);
		}
		for(int i = l; i < j; ++ i) add(n - arr[i].val + 1, -arr[i].op);
		j = mid;
		for(int i = r; i > mid; i --){// timej < timei, posj > posi, valj < vali
			while(j >= l && arr[j].pos > arr[i].pos) add(arr[j].val, arr[j].op), -- j;
			ans[arr[i].time] += arr[i].op * query(arr[i].val - 1);
		}
		for(int i = mid; i > j; -- i) add(arr[i].val, -arr[i].op);
	}
}
	cin >> n >> m;
	unordered_map<int,int> id;
	_rep(i, 0, n){
		int x;
		cin >> x;
		id[x] = i;
		arr[i] = (node){x, i, 0, 1};
	}
	_rep(i, 0, m){
		int x;
		cin >> x;
		arr[i + n] = (node){x, id[x], i + 1, -1};
	}
	dfs(0, n + m - 1);
	_rep(i, 1, m + 1) ans[i] += ans[i - 1];
	_rep(i, 0, m) cout << ans[i] << "\n";