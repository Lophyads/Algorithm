	VII g(n), fa(n);
	int rt = -1;
	_rep(i, 0, n){
		int x;
		cin >> x;
		x -= 1;
		if(x != -1){
			fa[i].eb(x);
			g[x].eb(i);
		}
		else rt = i;
	}
	VI d(n), mxd(n);// 深度/子树最深的深度
	VI son(n, -1);
	d[rt] = 1;
	auto dfs = [&](auto&& dfs, int u) -> void{
		mxd[u] = d[u];
		for(int& v : g[u]){
			d[v] = d[u] + 1;
			for(int i = 1; (int)fa[fa[v][i - 1]].size() >= i; i ++) fa[v].eb(fa[fa[v][i - 1]][i - 1]);// 预处理2^k祖先
			dfs(dfs, v);
			if(son[u] == -1) son[u] = v;
			else if(mxd[v] > mxd[son[u]]) son[u] = v;
			mxd[u] = max(mxd[v], mxd[u]);
		}
	};
	VI top(n, -1);
	int cnt = 0;
	VI dfn(n);
	VI down(n), up(n);// 记录该点往上的节点以及往下的节点
	auto dfs2 = [&](auto&& dfs2, int u, int p) -> void{// 长链剖分
		dfn[u] = cnt ++;
		down[dfn[u]] = u;
		up[dfn[u]] = p;
		if(son[u] != -1) {
			top[son[u]] = top[u];
			if(fa[p].empty()) dfs2(dfs2, son[u], top[p]);
			else dfs2(dfs2, son[u], fa[p][0]);
		}
		for(int& v : g[u])
			if(v != son[u]) {
				top[v] = v;
				dfs2(dfs2, v, v);
			}
	};
	auto query = [&](int u, int k){
		if(!k) return u;
		int t = __lg(k);// 求k的最高位1
		u = fa[u][t];// 先跳 2 ^ t的距离
		k -= (1 << t);
		k -= d[u] - d[top[u]];
		u = top[u];// 再跳到链头		
		return (k >= 0 ? up[dfn[u] + k] : down[dfn[u] - k]);
	};	
	dfs(dfs, rt);
	top[rt] = rt;
	dfs2(dfs2, rt, rt);