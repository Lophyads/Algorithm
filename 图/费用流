#include<bits/stdc++.h>
using namespace std;
#define _rep(i, x, y) for(int i = (int)x; i < (int)y; ++i)
#define _dep(i,x,y) for(int i = (int)x; i > (int)y; i--)
#define PII pair<int,int>
#define eb emplace_back
#define pb push_back
#define fi first
#define se second
#define PQ priority_queue
#define lb lower_bound
#define ub upper_bound
#define all(x) (x).begin(), (x).end()
typedef long long ll;
typedef vector<int> VI;
typedef vector<VI> VII;
typedef vector<ll> VL;
typedef vector<vector<ll>> VLL;
constexpr int mod = 1e9 + 7;
constexpr int KINF = 0x3f3f3f3f;
constexpr double eps = 1e-7;
namespace MCMF{
	int N, S, T;
	VII g;
	struct edge{
		int v;
		ll w, c;
		edge(int v, ll w, ll c) : v(v), w(w), c(c){}
	};
	vector<edge> e;
	void init(int n){
		N = n;
		g = VII(N);
		e.clear();
	}
	void add(int u, int v, int w, int c){
		g[u].eb(e.size());
		e.eb(v, w, c);
		g[v].eb(e.size());
		e.eb(u, 0, -c);
	}
	VI vis;
	VL d;
	bool spfa(){
		vis.assign(N, 0);
		d.assign(N, KINF);
		queue<int> q;
		q.push(S);
		d[S] = 0;
		vis[S] = 1;
		while(!q.empty()){
			int u = q.front();
			vis[u] = 0;
			q.pop();
			for(int& id : g[u]){
				auto E = e[id];
				int v = E.v;
				ll w = E.w, c = E.c;			
				if(w && d[v] > d[u] + c){
					d[v] = d[u] + c; 
					if(vis[v]) continue;
					q.push(v);
					vis[v] = 1;
				}
			}
		}
		return d[T] != KINF;
	}
	VI cur;
	ll cost = 0;//费用
	ll dinic(int u, ll lim){
		if(u == T || !lim) return lim;
		vis[u] = 1;// 防止因费用为0的边导致死循环
		ll tot = 0;
		for(int& i = cur[u]; i < (int)g[u].size(); ++i){
			int id = g[u][i];
			auto E = e[id];
			int v = E.v;
			ll w = E.w, c = E.c;
			if(!w || d[v] != d[u] + c || vis[v]) continue;
			ll f = dinic(v, min(lim, w));
			if(!f) continue;
			cost += f * c;
			e[id].w -= f;
			e[id ^ 1].w += f;
			tot += f;
			lim -= f;
			if(!lim) break;
		}
		vis[u] = 0;
		return tot;
	}
	pair<ll,ll> mcmf(int s, int t){
		S = s, T = t;
		ll flow = 0;//最大流
		while(spfa()){
			cur.assign(N, 0);
			vis.assign(N, 0);
			flow += dinic(s, KINF);
		}
		return {flow, cost};
	}
}
int main(){
	ios::sync_with_stdio(false); cin.tie(0);
	int n, m, s, t;
	cin >> n >> m >> s >> t;
	MCMF::init(n);
	while(m --){
		int u, v, w, c;
		cin >> u >> v >> w >> c;
		MCMF::add(u - 1, v - 1, w, c);
	}
	auto [a, b] = MCMF::mcmf(s - 1, t - 1);
	cout << a << " " << b << endl;
	return 0;
} 
// 注意int转long long会溢出
// dp记得处理非法状态
