#include<bits/stdc++.h>
using namespace std;
#define _rep(i, x, y) for(int i = (int)x; i < (int)y; ++i)
#define _dep(i,x,y) for(int i = (int)x; i > (int)y; i--)
#define PII pair<int,int>
#define eb emplace_back
#define pb push_back
#define fi first
#define se second
#define PQ priority_queue
#define lb lower_bound
#define ub upper_bound
typedef long long ll;
typedef vector<int> VI;
const int mod = 1e9 + 7;
const int KINF = 0x3f3f3f3f;
const int N = 1e4 + 10;
const double inf = 1 << 30;
struct edge{
	int u, v;
	double w;
}e[N];
pair<double, double> p[110];//一定要用PDD
int n, m;
double dist(int a, int b){
    return sqrt((p[a].fi - p[b].fi) * (p[a].fi - p[b].fi) + (p[a].se - p[b].se) * (p[a].se - p[b].se));
}
double slove(int r){//r不能设为全局变量
	int vis[n + 1], fa[n + 1], id[n + 1];
	double ans = 0;
	while(true){
		vector<double> in(n + 1, inf);
		_rep(i, 0, m){
			int u = e[i].u, v = e[i].v;
			double w = e[i].w;
			if(u != v && w < in[v]) {
				in[v] = w;
				fa[v] = u;
			}
		}
		_rep(i, 1, n + 1)
			if(i != r && inf == in[i]) return -1;//存在孤点
		int cnt = 0;
		memset(id, 0, sizeof id);
		memset(vis, 0, sizeof vis);
		_rep(i, 1, n + 1){
			if(i == r) continue;
			ans += in[i];
			int cur = i;
			while(cur != r && vis[cur] != i && !id[cur]){
				vis[cur] = i;
				cur = fa[cur];
			}//找环			
			if(cur != r && !id[cur]){
				id[cur] = ++ cnt;
				for(int x = fa[cur]; x != cur; x = fa[x])
					id[x] = cnt;
			}
		}
		if(!cnt) break;
		_rep(i, 1, n + 1) 
			if(!id[i]) id[i] = ++cnt;
		_rep(i, 0, m){
			int u = e[i].u;
			int v = e[i].v;
			e[i].u = id[u];
			e[i].v = id[v];//缩点
			if(e[i].u != e[i].v)
				e[i].w -= in[v];//把两个环连起来，再把其中一个环断开
		}
		n = cnt;
		r = id[r];
	}
	return ans;
}
int main(){
	//ios::sync_with_stdio(false); cin.tie(0);
	while(cin >> n >> m){
	    _rep(i, 1, n + 1)
	        cin >> p[i].fi >> p[i].se;
	    _rep(i, 0, m){
		    int a, b;
		    cin >> a >> b;
		    e[i].u = a, e[i].v = b;
		    if(a == b) e[i].w = inf;
		    else e[i].w = dist(a, b);
	    }
	    double ans = slove(1);
	    if(ans == -1) cout << "poor snoopy" << endl;
	    else printf("%.2f\n", ans);
	}
	return 0;
} 

