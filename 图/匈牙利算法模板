最小点覆盖
二分图中，选取最少的点数，使这些点和所有的边都有关联（把所有的边的覆盖），叫做最小点覆盖。
最小点覆盖数 = 最大匹配数

最大独立点集
在一个二分图中,选择一些顶点,使得所选择的点集中任意两个顶点之间没有边相连
可以证明，最大独立顶点集 = 总顶点数 - 最大匹配数

最小路径覆盖(path covering)：
是“路径” 覆盖“点”，即用尽量少的不相交简单路径覆盖有向无环图G的所有顶点，即每个顶点严格属于一条路径。路径的长度可能为0(单个点)。
最小路径覆盖数＝G的点数－最小路径覆盖中的边数。应该使得最小路径覆盖中的边数尽量多，但是又不能让两条边在同一个顶点相交。拆点：将每一个顶点i拆成两个顶点Xi和Yi。然后根据原图中边的信息，从X部往Y部引边。所有边的方向都是由X部到Y部。因此，所转化出的二分图的最大匹配数则是原图G中最小路径覆盖上的边数。
因此由最小路径覆盖数 ＝ 原图G的顶点数 － 二分图的最大匹配数 便可以得解。
bool find(int x){
    _rep(y, 1, m + 1){
        if(vis[y] || ban[x][y]) continue;
        vis[y] = 1;
        if(!match[y] || find(match[y])){
            match[y] = x;
            return true;
        }
    }
    return false;
}
int main(){
    ios::sync_with_stdio(false); cin.tie(0);
    cin >> n >> m >> t;
    _rep(i, 0, t){
        int x, y;
        cin >> x >> y;
        ban[x][y] = 1;
    }
    int ans = 0;
    _rep(x, 1, n + 1){
        memset(vis, 0, sizeof vis);
        if(find(x)) ans ++;
    }
    cout << ans << endl;
    return 0;
}

	auto Hopcroft_Karp = [&](){// 复杂度sqrt(V) * E , dinic 复杂度为 sqrt(E) * V, 传统匈牙利为 n * e + m
		VI d(n + 1), lx(n + 1), ly(m + 1);
		auto bfs = [&](){
			queue<int> q;
			rep(i, 1, n + 1){// 加入未匹配点
				if(!lx[i]){
					d[i] = 0;
					q.push(i);
				}
				else d[i] = KINF;
			}
			d[0] = KINF;// 0号节点为虚拟节点
			while(!q.empty()){
				int u = q.front();
				q.pop();
				if(d[u] < d[0]){
					for(int& v : g[u]){
						if(d[ly[v]] == KINF){
							d[ly[v]] = d[u] + 1;
							q.push(ly[v]);// 注意这里加入的是左部点而不是右部点
						}
					}
				}
			}
			return d[0] != KINF;
		};
		auto dfs = [&](auto&& dfs, int u) -> bool{
			if(!u) return true;
			for(int& v : g[u]){
				if(d[ly[v]] == d[u] + 1 && dfs(dfs, ly[v])){
					lx[u] = v, ly[v] = u;
					return true;
				}
			}
			d[u] = KINF;
			return false;
		};
		int ans = 0;
		while(bfs()){
			rep(i, 1, n + 1)
				if(!lx[i] && dfs(dfs, i)) ans ++;
		}
		return ans;
	};
