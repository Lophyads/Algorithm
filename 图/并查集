struct DSU {
    vector<pii> his;
    int fa[N], sz[N], cnt;
    int find(int x) {
        if (fa[x] == x) return x;
        return fa[x] = find(fa[x]);
    }
    bool merge(int x, int y) {
        int fx = find(x), fy = find(y);
        if (fx == fy) {
            his.emplace_back(fx, fy);
            return false;
        }
        if (sz[fx] > sz[fy]) swap(fx, fy);
        his.emplace_back(fx, fy);
        fa[fx] = fy;
        sz[fy] += sz[fx];
        cnt--;
        return true;
    }
    void rollback() {
        assert(!his.empty());
        auto [fx, fy] = his.back();
        if (fx == fy) return;
        cnt++;
        sz[fy] -= sz[fx];
        fa[fx] = fx;
    }
    void clear(int n) {
        cnt = n;
        for (int i = 0; i < N; i++)
            fa[i] = i, sz[i] = 1;
    }
};

// 带权
struct DSU {
    map<int, int> fa;
    map<int, int> w;
    int find(int x) {
        if (fa.count(x) == 0 || fa[x] == x) return x;
        int fx = find(fa[x]);
        w[x] ^= w[fa[x]];
        return fa[x] = fx;
    }
    void merge(int x, int y, int v) {
        int fx = find(x), fy = find(y);
        if (fx == fy) return;
        w[fy] = w[y] ^ w[x] ^ v;
        fa[fy] = fx;
    }
} dsu;