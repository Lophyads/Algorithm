class Solution {
public:
    using Point = vector<int>;
    static bool cmp(const Point& a,const Point& b){
        return a[0] < b[0] || (a[0] == b[0] && a[1] < b[1]);
    }
    vector<Point> outerTrees(vector<Point>& points) {
        sort(points.begin(),points.end(),cmp);//按横坐标排序
        vector<Point> ans;
        int n = points.size();
        for(int i=0;i<n;i++){
            while(ans.size() > 1 && cross(ans[ans.size() - 2], ans.back(), points[i]) > 0)
                ans.pop_back();
            ans.push_back(points[i]);
        }
        if(ans.size() == n) return ans;
        for(int i = n - 2; i >= 0; i--){
            while(ans.size() > 1 && cross(ans[ans.size() - 2], ans.back(), points[i]) > 0)
                ans.pop_back();
            ans.push_back(points[i]);
        }
        ans.pop_back();
        return ans;
    }
private:
    int cross(const Point& a,const Point& b,const Point& c)const{//向量叉乘
        return (b[0] - a[0]) * (c[1] - b[1]) - (c[0] - b[0]) * (b[1] - a[1]);// a->b X b->c
    }
};