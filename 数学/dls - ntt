const int md = 998244353;
inline void add(int &x, int y){
  	x += y;
  	if(x >= md)  x -= md;
}

inline void sub(int &x, int y){
  	x -= y;
  	if(x < 0) x += md;
}

inline int mul(int x, int y){
  	return (long long)x * y % md;
}

inline int power(int x, int y){
  	int res = 1;
  	for(; y; y >>= 1, x = mul(x, x)){
    	if (y & 1) {
      	res = mul(res, x);
    	}
  	}
  	return res;
}

inline int inv(int a) {
  	a %= md;
  	if(a < 0) a += md;
  	int b = md, u = 0, v = 1;
  	while(a){
    	int t = b / a;
    	b -= t * a;
    	swap(a, b);
    	u -= t * v;
    	swap(u, v);
  	}
  	if(u < 0) u += md;
  	return u;
}

namespace ntt {
	int base = 1, root = -1, max_base = -1;
	vector<int> rev = {0, 1}, roots = {0, 1};

	void init() {
	  int temp = md - 1;
	  max_base = 0;
	  while (temp % 2 == 0) {
	    temp >>= 1;
	    ++max_base;
	  }
	  root = 2;
	  while (true) {
	    if (power(root, 1 << max_base) == 1 && power(root, 1 << (max_base - 1)) != 1) {
	      break;
	    }
	    ++root;
	  }
	}
	
	void ensure_base(int nbase) {
	  if (max_base == -1) {
	    init();
	  }
	  if (nbase <= base) {
	    return;
	  }
	  assert(nbase <= max_base);
	  rev.resize(1 << nbase);
	  for (int i = 0; i < 1 << nbase; ++i) {
	    rev[i] = (rev[i >> 1] >> 1) | ((i & 1) << (nbase - 1));
	  }
	  roots.resize(1 << nbase);
	  while (base < nbase) {
	    int z = power(root, 1 << (max_base - 1 - base));
	    for (int i = 1 << (base - 1); i < 1 << base; ++i) {
	      roots[i << 1] = roots[i];
	      roots[i << 1 | 1] = mul(roots[i], z);
	    }
	    ++base;
	  }
	}
	
	void dft(vector<int> &a) {
	  int n = a.size(), zeros = __builtin_ctz(n);
	  ensure_base(zeros);
	  int shift = base - zeros;
	  for (int i = 0; i < n; ++i) {
	    if (i < rev[i] >> shift) {
	      swap(a[i], a[rev[i] >> shift]);
	    }
	  }
	  for (int i = 1; i < n; i <<= 1) {
	    for (int j = 0; j < n; j += i << 1) {
	      for (int k = 0; k < i; ++k) {
	        int x = a[j + k], y = mul(a[j + k + i], roots[i + k]);
	        a[j + k] = (x + y) % md;
	        a[j + k + i] = (x + md - y) % md;
	      }
	    }
	  }
	}
	
	vector<int> multiply(vector<int> a, vector<int> b) {
	  int need = a.size() + b.size() - 1, nbase = 0;
	  while (1 << nbase < need) {
	    ++nbase;
	  }
	  ensure_base(nbase);
	  int sz = 1 << nbase;
	  a.resize(sz);
	  b.resize(sz);
	  bool equal = a == b;
	  dft(a);
	  if (equal) {
	    b = a;
	  } else {
	    dft(b);
	  }
	  int inv_sz = inv(sz);
	  for (int i = 0; i < sz; ++i) {
	    a[i] = mul(mul(a[i], b[i]), inv_sz);
	  }
	  reverse(a.begin() + 1, a.end());
	  dft(a);
	  a.resize(need);
	  return a;
	}
	
	
}

using ntt::multiply;

vector<int>& operator *= (vector<int> &a, const vector<int> &b) {
  if (min(a.size(), b.size()) < 128) {
    vector<int> c = a;
    a.assign(a.size() + b.size() - 1, 0);
    for (int i = 0; i < (int)c.size(); ++i) {
      for (int j = 0; j < (int)b.size(); ++j) {
        add(a[i + j], mul(c[i], b[j]));
      }
    }
  } else {
    a = multiply(a, b);
  }
  return a;
}

vector<int> operator * (const vector<int> &a, const vector<int> &b) {
  vector<int> c = a;
  return c *= b;
}

vector<int> multiply_all(int l, int r, vector<vector<int>> &all) {
  if (l > r) {
    return vector<int>();
  } else if (l == r) {
    return all[l];
  } else {
    int y = (l + r) >> 1;
    return multiply_all(l, y, all) * multiply_all(y + 1, r, all);
    }
}