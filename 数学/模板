int gcd(int a, int b){
    return b ? gcd(b, a % b) : a;
}
auto exgcd = [&](auto&& exgcd, int a, int b){
	    if(!b){
	        Y = 0;
	        X = 1;
	        gcd = a;
	        return ;
	    }
	    // ax + by = c ==  bx + (a % b)y == bx + (a - (a/b)b)y == ay + b(x - (a/b)y)
	    // 观察系数可得 x = y, y = x - (a/b)y
	    exgcd(exgcd, b, a % b);
	    int t = X;
	    X = Y;
	    Y = t - (a / b) * Y;
	    return;
	};
void get_prim(int num){//线性筛素数
    vector<int> prim;
	//memset(v, 0, sizeof v);
    for(int i = 2; i <= N; i++){
        if(!v[i]) prim.eb(i), v[i] = i;
        for(int& p : prim){   	
        	if(p > v[i] || p * i > N) break;
            v[p * i] = p; // if(!v[i]) i 为质数  
        }
    }
}
auto phi = [&](ll x){//欧拉函数
	ll ans = x;
	/* 欧拉函数是积性函数
		对于素数p而言,φ(p) = p - 1
		φ(p ^ k) = p ^ k - p ^ (k - 1)
		而任意一个数都可以表示为若干个素数的次方的乘积
		φ(x) = φ(p1^k1) * φ(p2^k2) * φ(p3^k3) ...
			= (p1^k1  - p1^(k1-1)) * (p2^k2  - p2^(k2-1)) * (p3^k1  - p3^(k3-1))
			= p1^k1 * p2^k2 * p3^k3 * (1 - 1 / p1) * (1 - 1 / p2) * (1 - 1 / p3)
			= x * (1 - 1 / p1) * (1 - 1 / p2) * (1 - 1 / p3)
	*/
	for(int i = 2; i * i <= x; i++){
		if(x % i == 0){
			ans = ans / i * (i - 1); 
			while(x % i == 0) x /= i;
		}
	}
	if(x > 1) ans = ans / x * (x - 1);
	return ans;
	/* 关于欧拉函数的一些性质
		(1) n的所有约数的欧拉函数值等于n
		(2) 所有小于n且与n互素的数之和等于 n / 2 * φ(n)
	*/
};
int c(int n, int k, int mod){//求大组合数
    rep(i, 0, n + 1) fac[i] = i ? fac[i - 1] * i % mod : 1;
	rep(i, 1, n + 1) inv[i] = i == 1 ? 1 : (mod - mod / i) * inv[mod % i] % mod;//求i的乘法逆元
	rep(i, 0, n + 1) inv[i] = i ? inv[i - 1] * inv[i] % mod : 1;//求i! 的乘法逆元
	// ka + b = mod,   两边同乘inv(a) * inv(b)   k * inv(b) + inv(a) = mod,  inv(a) = -(m - m / a) * inv(m % a)
    return fac[n] * inv[k] % mod * inv[n - k] % mod;
}// edu33E
auto lucas = [&](auto&& lucas, ll n, ll m, ll mod) -> ll{	// 卢卡斯定理	
	auto C = [&](ll n, ll m){
		if(n < m) return 0ll;
		auto qmi = [&](ll a, ll x){// 快速幂
			ll res = 1;
			while(x){
				if(x & 1) (res *= a) %= mod;
				(a *= a) %= mod;
				x >>= 1;
			}
			return res;
		};
		ll ans = 1, inv = 1;
		for(ll i = n, j = 1; j <= m; i --, j ++){
			(ans *= i) %= mod;
			(inv *= j) %= mod;
		}
		inv = qmi(inv, mod - 2) % mod;
		return ans * inv % mod;
	};
	if(n < mod && m < mod) return C(n, m);
	return C(n % mod, m % mod) * lucas(lucas, n / mod, m / mod, mod) % mod;
};
auto crt = [&](){// 中国剩余定理
	ll M = 1;
	_rep(i, 0, n) M *= m[i];
	ll x, y;
	auto exgcd = [&](auto&& exgcd, ll a, ll b){
		if(!b){
			x = 1;
			y = 0;
			return ;
		}
		exgcd(exgcd, b, a % b);
		int t = x;
		x = y;
		y = t - (a / b) * y;
		return;
	};
	ll ans = 0;
	_rep(i, 0, n){
		ll mi = M / m[i];
		exgcd(exgcd, mi, m[i]);// 求mi在模m[i]的意义下的逆元(x)
		(ans += 1ll * a[i] * mi * x) %= M;
	}
	if(ans < 0) ans += M;
	return ans;
};
ll excrt(VL& b, VL& m){// 余数,模
	ll r1 = b[0], m1 = m[0];
	// 合并同余方程
	rep(i, 1, SZ(m)){
		ll r2 = b[i], m2 = m[i];
		ll d = __gcd(m1, m2);
		ll LCM = lcm(m1, m2);
		if(r2 % d != r1 % d) return -1;
		exgcd(m1 / d, m2 / d);
		ll t = (r2 - r1) / d;
		if(t < LCM) t += LCM;
		ll k1 = qmul(X, t, LCM);
		r1 += qmul(k1, m1, LCM);
		r1 %= LCM;
		if(r1 <= 0) r1 += LCM;
		m1 = LCM; 
	}
	return r1;
}
constexpr int N = 5e4 + 7;
int mu[N], vis[N];
VI prim;
void get_mu(){// 线性筛求莫比乌斯函数
	mu[1] = 1;
	for(int i = 2; i < N; i ++){
		if(!vis[i]){
			mu[i] = -1;
			prim.eb(i);
		}
		for(int& p : prim){
			if(p * i >= N) break;
			vis[i * p] = 1;
			if(i % p == 0){
				mu[i * p] = 0;// 有质因子次数大于1		
				break;
			}
			mu[p * i] = mu[i] * mu[p]; //积性函数的性质
		}
	}
}
auto BSGS = [&](ll a, ll b, ll p) -> int{// 大步小步
	unordered_map<ll,ll> mp;
	/* 由欧拉定理可得, a ^ φ(p) ≡ 1 (mod p)
		由鸽巢定理得0<= x < φ(p) <= p - 1 < p
		但可以用meet in the middle的思想把x 拆为 At + B
		a ^ At ≡ b * a ^ B(mod p)
		因为A的可能取值为φ(p) / t个, B的可能取值为 φ(p) % t个
		所以可以取t = sqrt(m)
		然后对A,B枚举(1 ~ t), 就可以保证x ∈ (1, φ(p))都被枚举一遍
		这样复杂度就变为sqrt(p) 
	*/
	ll cur = b * a % p, t = sqrt(p) + 1;
	_rep(B, 1, t + 1){
		mp[cur] = B;
		(cur *= a) %= p;
	}
	auto qmi = [&](ll a, ll x){
		ll res = 1;
		a %= p;
		while(x){
			if(x & 1) (res *= a) %= p;
			x >>= 1;
			(a *= a) %= p;
		}
		return res;
	};
	ll at = qmi(a, t);
	ll now = at;
	_rep(A, 1, t + 1){
		if(mp[now]) return A * t - mp[now];
		(now *= at) %= p;
	}
	return -1;
};
	// 拓展BSGS
auto exBSGS = [&](auto&& exBSGS, ll a, ll b, ll p, ll k = 1) -> ll{// k为系数
	auto BSGS = [&](ll a, ll b, ll p, ll k = 1) -> int{// 大步小步(带系数)
		unordered_map<ll,ll> mp;
		ll cur = b * a % p, t = sqrt(p) + 1;
		_rep(B, 1, t + 1){
			mp[cur] = B;
			(cur *= a) %= p;
		}
		auto qmi = [&](ll a, ll x){
			ll res = 1;
			a %= p;
			while(x){
				if(x & 1) (res *= a) %= p;
				x >>= 1;
				(a *= a) %= p;
			}
			return res;
		};
		ll at = qmi(a, t);
		ll now = at * k % p;
		_rep(A, 1, t + 1){
			if(mp[now]) return A * t - mp[now];
			(now *= at) %= p;
		}
		return -KINF;//保证多次加1后仍是负数(负数表示无解)
	}; 
	if(b == 1) return 0ll;
	if(!a && !b) return 1ll;
	ll d = __gcd(a, p);
	if(b % d) return -KINF;//保证多次加1后仍是负数(负数表示无解)
	if(d == 1) return BSGS(a, b, p, k % p);
	return exBSGS(exBSGS, a, b / d, p / d, k * a / d % p) + 1;
};





// 洛谷模板题 原根
int main(){
	ios::sync_with_stdio(false); cin.tie(0);
	int T;
	cin >> T;
	VI N(T), D(T);
	int maxN = 0;
	_rep(i, 0, T) cin >> N[i] >> D[i], maxN = max(maxN, N[i]);
	VI prim, phi(maxN + 1), minp(maxN + 1);// 质数表,欧拉函数表,最小质因子表
	vector<bool> exit(maxN + 1);// 记录是否有原根
	auto init = [&](){// 初始化质数表,欧拉函数表并判断哪些树有原根
		phi[1] = 1;
		for(int i = 2; i <= maxN; i ++){
			if(!minp[i]){
				minp[i] = i;
				prim.eb(i);
				phi[i] = i - 1;
			}
			for(int& p : prim){
				if(p > minp[i] || p * i > maxN) break;
				minp[p * i] = p;
				if(i % p == 0){
					phi[i * p] = phi[i] * p; 
					break;
				}
				phi[p * i] = phi[p] * phi[i];//积性函数性质
			}
		}
		exit[2] = exit[4] = true;
		for(int& p : prim){
			for(ll tmp = p; tmp <= maxN; tmp *= p){
				exit[tmp] = true;
				if(tmp * 2 <= maxN) exit[tmp * 2] = true;
			}
		}
	};
	init();
	auto qmi = [&](int a, int b, int p){//快速幂
		int res = 1;
		while(b){
			if(b & 1) res = (1ll * res * a) % p;
			b >>= 1;
			a = (1ll * a * a) % p;
		}
		return res;
	};
	_rep(i, 0, T){
		int n = N[i], d = D[i];
		if(!exit[n]){// 不存在原根
			cout << "0\n\n";
			continue;
		}	
		vector<bool> chk(phi[n] + 1);// 记录是否与phi[n]互质
		VI fac;// phi[n]的质因子
		int x = phi[n];
		for(int& p : prim){
			if(1ll * p * p > x) break;
			if(x % p == 0){
				fac.eb(p);
				while(x % p == 0) x /= p;
				for(ll k = p; k <= phi[n]; k += p) chk[k] = true;// 不与phi[n]互质
			}
		}
		if(x > 1){
			fac.eb(x);
			for(ll k = x; k <= phi[n]; k += x) chk[k] = true;
		}
		int min_prm = 1;
		for(min_prm = 1; ; min_prm++){// 求最小原根
			while(qmi(min_prm, phi[n], n) != 1) min_prm ++;
			bool ok = true;
			for(int& f : fac){
				if(qmi(min_prm, phi[n] / f, n) == 1){
					ok = false;
					break;
				}
			}
			if(ok) break;
		}
		VI ans;
		int tmp = min_prm;
		_rep(num, 1, phi[n] + 1){
			if(!chk[num]) ans.eb(tmp);// 如果与phi[n]互质
			tmp = 1ll * tmp * min_prm % n; 
		}
		sort(all(ans));
		cout << ans.size() << endl;
		for(int j = d - 1; j < (int)ans.size(); j += d) cout << ans[j] << " ";
		cout << endl;
	}
	return 0;
} 
void init(){//线性筛处理约数个数 https://www.cnblogs.com/ldysy2012/p/10390857.html
	d[1] = 1;
	_rep(i, 2, N){
		if(!vis[i])
			prim.eb(i), d[i] = 2;
		for(int& p : prim){
			if(p * i >= N) break;
			vis[i * p] = 1;
			if(i % p == 0){
				d[i * p] = 2 * d[i] - d[i / p];
				break;
			}
			d[i * p] = d[i] * 2;
		}
	}
}
void get(int x){// 获得x的所有质因子
	fact.clear();
	for(int i = 2; 1ll * i * i <= x; i ++){
		if(x % i == 0){
			fact.eb(i);
			while(x % i == 0) x /= i;
		}
	}
	if(x > 1) fact.eb(x);
}
int calc(int l,int r, int x){// 求[l, r]与x互质的数的个数
	int n = fact.size();
	int res = 0;// 不互质的个数
	for(int i = 1; i < (1 << n); i ++){// 二进制枚举因数组合
		int tmp = 1, cnt = 0;
		_rep(j, 0, n){
			if((i >> j) & 1)
				tmp *= fact[j], cnt++;
		}
		// 容斥原理,奇加偶减
		if(cnt & 1) res += r / tmp - (l - 1) / tmp;
		else res -= r / tmp - (l - 1) / tmp;
	}
	return r - l + 1 - res;
}