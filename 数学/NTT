namespace NTT{
    using P = vector<ll>;
    constexpr ll mod = 998244353;
    constexpr ll G = 3; // 原根
    vector<int> rev;
    void add(ll &a, ll b){
        a += b;
        if(a >= mod) a -= mod;
    }
    void sub(ll &a, ll b){
        a -= b;
        if(a < 0) a += mod;
    }
    void mul(ll &a, ll b){
        a = a * b % mod;
    }
    ll power(ll a, ll r){
        ll res = 1;
        for(; r; r >>= 1, mul(a, a))
            if(r & 1) mul(res, a);
        return res;
    }
    void frev(int n){
        if((int)rev.size() == n) return;
        rev.resize(n);
        for(int i = 0; i < n; i += 1) rev[i] = i ? rev[i >> 1] >> 1 | (i & 1 ? n >> 1 : 0) : 0;
    }
    void DFT(P& v, bool inv = false){
        int n = v.size();
        frev(n);
        ll* a = v.data();
        for(int i = 0; i < n; i += 1) if(i < rev[i]) swap(a[i], a[rev[i]]);
        for(int m = 1; m <= n >> 1; m <<= 1){
            ll w0 = power(inv ? power(G, mod - 2) : G, (mod - 1) / m >> 1);
            for(int j = 0; j < n; j += m << 1)
                for(ll k = 0, w = 1, tmp; k < m; k += 1, mul(w, w0)){
                    tmp = a[j + k + m];
                    a[j + k + m] = a[j + k];
                    mul(tmp, w);
                    add(a[j + k], tmp);
                    sub(a[j + k + m], tmp);
                }
        }
        if(inv) for(int i = 0, n_ = power(n, mod - 2); i < n; i += 1) mul(a[i], n_);
    }
    void IDFT(P& v){
        DFT(v, true);
    }
    P operator * (const P& a, const P& b){
        int n = a.size(), m = b.size(), k = 1;
        while(k < n + m - 1) k <<= 1;
        P A(a);
        A.resize(k);
        DFT(A);
        if(&a == &b) for(int i = 0; i < k; i += 1) mul(A[i], A[i]);
        else{
            P B(b);
            B.resize(k);
            DFT(B);
            for(int i = 0; i < k; i += 1) mul(A[i], B[i]);
        }
        IDFT(A);
        A.resize(n + m - 1);
        return A;
    }
    P DCNTT(vector<P>& v, int L, int R){
        if(L == R) return v[L];
        P A = DCNTT(v, L, (L + R) >> 1), B = DCNTT(v, ((L + R) >> 1) + 1, R);
        return A * B;
    }
    P DCNTT(vector<P>& v){
        return DCNTT(v, 0, v.size() - 1);
    }
}