	ll power[maxn];//power[i]记录p的i次方
    ll hash_mod = 1e12 + 39;
    int p = 131;
	power[0] = 1;
	rep(i, 1, maxn){
        power[i] = (power[i - 1] * p) % hash_mod;
    }
	auto get_hash = [&](string s){
		ll res = 0;
		rep(i, 1, s.size() + 1){
    		res = (res * p + s[i - 1] - 'a' + 1) % hash_mod;
    	}
    	return res;
	};
    auto get = [&](int l, int r){// hash_mod = 1e9 + 7
		ll res = (Hash[r] - Hash[l - 1] * power[r - l + 1]) % hash_mod;
		while(res < 0) res += hash_mod;
		return res % hash_mod;
	};

typedef pair<int,int> hashv;
const int mod1 = 1000000007;
const int mod2 = 1000000009;
mt19937 mrand(random_device{}()); 
int rnd(int x) {return mrand() % x;}
inline hashv operator + (const hashv& a,const hashv& b) {
	int c1 = a.first + b.first, c2 = a.second + b.second;
	if (c1 >= mod1) c1 -= mod1;
	if (c2 >= mod2) c2 -= mod2;
	return make_pair(c1, c2);
}
 
inline hashv operator - (const hashv& a,const hashv& b) {
	int c1 = a.first - b.first, c2 = a.second - b.second;
	if (c1 < 0) c1 += mod1;
	if (c2 < 0) c2 += mod2;
	return make_pair(c1, c2);
}
 
inline hashv operator * (const hashv& a,const hashv& b) {
	return make_pair((long long)a.first * b.first % mod1, (long long)a.second * b.second % mod2);
}