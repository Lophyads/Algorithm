namespace KMP{
	const int N = 1e6 + 10;
	char s[N], t[N];
	int nxt[N];// 最长相等真前后缀
	int n, m;
	// s = "$" + s;
	void build(){
		for(int i = 2, j = 0; i <= m; ++ i){
			while(j && t[j + 1] != t[i]) j = nxt[j];
			j = nxt[i] = j + (t[j + 1] == t[i]);
		}
	}
	void match(){
		for(int i = 1, j = 0; i <= n; ++ i){
			while(j && t[j + 1] != s[i]) j = nxt[j];
			j += (t[j + 1] == s[i]);
			if(j == m){
				j = nxt[j];
			}
		}
	}
}

// z-function
z[1] = m = strlen(t + 1);
for(int i = 2, l = 0, r = 0; i <= m; i++) {
	z[i] = i > r ? 0 : min(r - i + 1, z[i - l + 1]);
	while(t[1 + z[i]] == t[i + z[i]]) z[i]++;
	if(i + z[i] - 1 > r) l = i, r = i + z[i] - 1;
}