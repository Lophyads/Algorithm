struct point{
	double x, y;
	point(double x = 0, double y = 0) : x(x), y(y){}
};
point operator + (const point &a, const point &b){
	return point(a.x + b.x, a.y + b.y);
}
point operator += (point &a, const point &b){
	return point(a.x += b.x, a.y += b.y);
}
point operator - (const point &a, const point &b){
	return point(a.x - b.x, a.y - b.y);
}
point operator * (const point &a, const double &b){
	return point(a.x * b, a.y * b);
}
point operator / (const point &a, const double &b){
	return point(a.x / b, a.y / b);
}
point operator /= (point &a, const double &b){
	return point(a.x /= b, a.y /= b);
}
double cross(const point &a, const point &b){
	return a.x * b.y - a.y * b.x;
}
point rotate(const point &a, const double &b){
	return point(a.x * cos(b) - a.y * sin(b), a.x * sin(b) + a.y * cos(b));
}
	// 有向面积公式
	rep(i, 0, n) cin >> p[i].x >> p[i].y;
	double sum = 0;
	rep(i, 1, n - 1)
		sum += 1.0 / 2.0 * cross(p[i] - p[0], p[i + 1] - p[i]);